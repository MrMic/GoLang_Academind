package routes

import (
	"net/http"
	"strconv"

	"github.com/gin-gonic/gin"
	"michaelchlon.fr/api/models"
)

// * NOTE: Define a handler for the "/events" route (GET) -----------------------------
func getEvents(context *gin.Context) {
	events, err := models.GetAllEvents() // * NOTE: Retrieve all events from the model
	if err != nil {
		context.JSON(http.StatusInternalServerError, gin.H{"message": "Could not fetch events!"})
		return
	}
	context.JSON(http.StatusOK, events) // * NOTE: Respond with a JSON object containing a message
}

// * NOTE: Define a handler for the "/events/:id" route (GET) ------------------------
func getEvent(context *gin.Context) {
	eventId, err := strconv.ParseInt(context.Param("id"), 10, 64) // * NOTE: Get the event ID from the URL parameters
	if err != nil {
		context.JSON(http.StatusBadRequest, gin.H{"message": "Invalid event ID!"}) // * NOTE: Respond with an error if the ID is invalid
		return
	}

	event, err := models.GetEventByID(eventId) // * NOTE: Retrieve the event by ID from the model
	if err != nil {
		context.JSON(http.StatusInternalServerError, gin.H{"message": "Could not fetch event!"}) // * NOTE: Respond with an error if the event could not be fetched
		return
	}

	context.JSON(http.StatusOK, event) // * NOTE: Respond with the event data in JSON format
}

// * NOTE: Define a handler for the "/events" route (POST) -----------------------------
func createEvent(context *gin.Context) {
	token := context.Request.Header.Get("Authorization")
	if token == "" {
		context.JSON(http.StatusUnauthorized, gin.H{
			"message": "Unauthorized: No token provided.",
		})
		return
	}

	var event models.Event // * NOTE: Create a new event instance

	// * NOTE: Bind the JSON request body to the event instance
	if err := context.ShouldBindJSON(&event); err != nil {
		context.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	event.ID = 1     // * NOTE: Set a default ID for the event (in a real application, this would be generated by the database)
	event.UserID = 1 // * NOTE: Set a default UserID for the event (in a real application, this would be set based on the authenticated user)

	err := event.Save() // * NOTE: Save the event using the Save method defined in the model
	if err != nil {
		context.JSON(http.StatusInternalServerError, gin.H{"message": "Could not create event!"})
		return
	}

	context.JSON(http.StatusCreated, gin.H{
		"message": "Event created successfully!",
		"event":   event,
	}) // * NOTE: Respond with a success message
}

// * NOTE: Update method for the Event model ----------------------------------------
func updateEvent(context *gin.Context) {
	eventId, err := strconv.ParseInt(context.Param("id"), 10, 64)
	if err != nil {
		context.JSON(http.StatusBadRequest, gin.H{"message": "Could not parse event id."})
		return
	}

	_, err = models.GetEventByID(eventId)

	if err != nil {
		context.JSON(http.StatusInternalServerError, gin.H{"message": "Could not fetch the event."})
		return
	}

	var updatedEvent models.Event
	err = context.ShouldBindJSON(&updatedEvent)

	if err != nil {
		context.JSON(http.StatusBadRequest, gin.H{"message": "Could not parse request data."})
		return
	}

	updatedEvent.ID = eventId
	err = updatedEvent.Update()
	if err != nil {
		context.JSON(http.StatusInternalServerError, gin.H{"message": "Could not update event."})
		return
	}
	context.JSON(http.StatusOK, gin.H{"message": "Event updated successfully!"})
}

// * NOTE: Delete method for the Event model ----------------------------------------
func deleteEvent(context *gin.Context) {
	eventId, err := strconv.ParseInt(context.Param("id"), 10, 64)
	if err != nil {
		context.JSON(http.StatusBadRequest, gin.H{"message": "Could not parse event id."})
		return
	}

	event, err := models.GetEventByID(eventId)

	if err != nil {
		context.JSON(http.StatusInternalServerError, gin.H{"message": "Could not fetch the event."})
		return
	}

	err = event.DeleteEvent() // * NOTE: Call the DeleteEvent method from the model
	if err != nil {
		context.JSON(http.StatusInternalServerError, gin.H{"message": "Could not delete event."})
		return
	}

	context.JSON(http.StatusOK, gin.H{"message": "Event deleted successfully!"}) // * NOTE: Respond with a success message
}
